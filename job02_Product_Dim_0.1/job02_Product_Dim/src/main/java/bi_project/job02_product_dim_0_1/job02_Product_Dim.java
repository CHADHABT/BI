// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package bi_project.job02_product_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: job02_Product_Dim Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class job02_Product_Dim implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "job02_Product_Dim";
	private final String projectName = "BI_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				job02_Product_Dim.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(job02_Product_Dim.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_supplier_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_group_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Category_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ligne_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class product_dimStruct implements routines.system.IPersistableRow<product_dimStruct> {
    final static byte[] commonByteArrayLock_BI_PROJECT_job02_Product_Dim = new byte[0];
    static byte[] commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public double PRODUCT_ID;

				public double getPRODUCT_ID () {
					return this.PRODUCT_ID;
				}
				
			    public String PRODUCT_LINE;

				public String getPRODUCT_LINE () {
					return this.PRODUCT_LINE;
				}
				
			    public String PRODUCT_CATEGORY;

				public String getPRODUCT_CATEGORY () {
					return this.PRODUCT_CATEGORY;
				}
				
			    public String PRODUCT_GROUP;

				public String getPRODUCT_GROUP () {
					return this.PRODUCT_GROUP;
				}
				
			    public String PRODUCT_NAME;

				public String getPRODUCT_NAME () {
					return this.PRODUCT_NAME;
				}
				
			    public String SUPPLIER_COUNTRY;

				public String getSUPPLIER_COUNTRY () {
					return this.SUPPLIER_COUNTRY;
				}
				
			    public String SUPPLIER_NAME;

				public String getSUPPLIER_NAME () {
					return this.SUPPLIER_NAME;
				}
				
			    public Double SUPPLIER_ID;

				public Double getSUPPLIER_ID () {
					return this.SUPPLIER_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.PRODUCT_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final product_dimStruct other = (product_dimStruct) obj;
		
						if (this.PRODUCT_ID != other.PRODUCT_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(product_dimStruct other) {

		other.PRODUCT_ID = this.PRODUCT_ID;
	            other.PRODUCT_LINE = this.PRODUCT_LINE;
	            other.PRODUCT_CATEGORY = this.PRODUCT_CATEGORY;
	            other.PRODUCT_GROUP = this.PRODUCT_GROUP;
	            other.PRODUCT_NAME = this.PRODUCT_NAME;
	            other.SUPPLIER_COUNTRY = this.SUPPLIER_COUNTRY;
	            other.SUPPLIER_NAME = this.SUPPLIER_NAME;
	            other.SUPPLIER_ID = this.SUPPLIER_ID;
	            
	}

	public void copyKeysDataTo(product_dimStruct other) {

		other.PRODUCT_ID = this.PRODUCT_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_PROJECT_job02_Product_Dim.length) {
				if(length < 1024 && commonByteArray_BI_PROJECT_job02_Product_Dim.length == 0) {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[1024];
				} else {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length);
			strReturn = new String(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_PROJECT_job02_Product_Dim.length) {
				if(length < 1024 && commonByteArray_BI_PROJECT_job02_Product_Dim.length == 0) {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[1024];
				} else {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length);
			strReturn = new String(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			        this.PRODUCT_ID = dis.readDouble();
					
					this.PRODUCT_LINE = readString(dis);
					
					this.PRODUCT_CATEGORY = readString(dis);
					
					this.PRODUCT_GROUP = readString(dis);
					
					this.PRODUCT_NAME = readString(dis);
					
					this.SUPPLIER_COUNTRY = readString(dis);
					
					this.SUPPLIER_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			        this.PRODUCT_ID = dis.readDouble();
					
					this.PRODUCT_LINE = readString(dis);
					
					this.PRODUCT_CATEGORY = readString(dis);
					
					this.PRODUCT_GROUP = readString(dis);
					
					this.PRODUCT_NAME = readString(dis);
					
					this.SUPPLIER_COUNTRY = readString(dis);
					
					this.SUPPLIER_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.PRODUCT_ID);
					
					// String
				
						writeString(this.PRODUCT_LINE,dos);
					
					// String
				
						writeString(this.PRODUCT_CATEGORY,dos);
					
					// String
				
						writeString(this.PRODUCT_GROUP,dos);
					
					// String
				
						writeString(this.PRODUCT_NAME,dos);
					
					// String
				
						writeString(this.SUPPLIER_COUNTRY,dos);
					
					// String
				
						writeString(this.SUPPLIER_NAME,dos);
					
					// Double
				
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.PRODUCT_ID);
					
					// String
				
						writeString(this.PRODUCT_LINE,dos);
					
					// String
				
						writeString(this.PRODUCT_CATEGORY,dos);
					
					// String
				
						writeString(this.PRODUCT_GROUP,dos);
					
					// String
				
						writeString(this.PRODUCT_NAME,dos);
					
					// String
				
						writeString(this.SUPPLIER_COUNTRY,dos);
					
					// String
				
						writeString(this.SUPPLIER_NAME,dos);
					
					// Double
				
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCT_ID="+String.valueOf(PRODUCT_ID));
		sb.append(",PRODUCT_LINE="+PRODUCT_LINE);
		sb.append(",PRODUCT_CATEGORY="+PRODUCT_CATEGORY);
		sb.append(",PRODUCT_GROUP="+PRODUCT_GROUP);
		sb.append(",PRODUCT_NAME="+PRODUCT_NAME);
		sb.append(",SUPPLIER_COUNTRY="+SUPPLIER_COUNTRY);
		sb.append(",SUPPLIER_NAME="+SUPPLIER_NAME);
		sb.append(",SUPPLIER_ID="+String.valueOf(SUPPLIER_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(product_dimStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PRODUCT_ID, other.PRODUCT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class productStruct implements routines.system.IPersistableRow<productStruct> {
    final static byte[] commonByteArrayLock_BI_PROJECT_job02_Product_Dim = new byte[0];
    static byte[] commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[0];

	
			    public Double PRODUCT_ID;

				public Double getPRODUCT_ID () {
					return this.PRODUCT_ID;
				}
				
			    public String PRODUCT_NAME;

				public String getPRODUCT_NAME () {
					return this.PRODUCT_NAME;
				}
				
			    public Double SUPPLIER_ID;

				public Double getSUPPLIER_ID () {
					return this.SUPPLIER_ID;
				}
				
			    public Double PRODUCT_LEVEL;

				public Double getPRODUCT_LEVEL () {
					return this.PRODUCT_LEVEL;
				}
				
			    public Double PRODUCT_REF_ID;

				public Double getPRODUCT_REF_ID () {
					return this.PRODUCT_REF_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_PROJECT_job02_Product_Dim.length) {
				if(length < 1024 && commonByteArray_BI_PROJECT_job02_Product_Dim.length == 0) {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[1024];
				} else {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length);
			strReturn = new String(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_PROJECT_job02_Product_Dim.length) {
				if(length < 1024 && commonByteArray_BI_PROJECT_job02_Product_Dim.length == 0) {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[1024];
				} else {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length);
			strReturn = new String(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
					this.PRODUCT_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
					this.PRODUCT_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
					// String
				
						writeString(this.PRODUCT_NAME,dos);
					
					// Double
				
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
					// Double
				
						if(this.PRODUCT_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
					// Double
				
						if(this.PRODUCT_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
					// String
				
						writeString(this.PRODUCT_NAME,dos);
					
					// Double
				
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
					// Double
				
						if(this.PRODUCT_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
					// Double
				
						if(this.PRODUCT_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCT_ID="+String.valueOf(PRODUCT_ID));
		sb.append(",PRODUCT_NAME="+PRODUCT_NAME);
		sb.append(",SUPPLIER_ID="+String.valueOf(SUPPLIER_ID));
		sb.append(",PRODUCT_LEVEL="+String.valueOf(PRODUCT_LEVEL));
		sb.append(",PRODUCT_REF_ID="+String.valueOf(PRODUCT_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_BI_PROJECT_job02_Product_Dim = new byte[0];
    static byte[] commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[0];

	
			    public Double PRODUCT_ID;

				public Double getPRODUCT_ID () {
					return this.PRODUCT_ID;
				}
				
			    public String PRODUCT_NAME;

				public String getPRODUCT_NAME () {
					return this.PRODUCT_NAME;
				}
				
			    public Double SUPPLIER_ID;

				public Double getSUPPLIER_ID () {
					return this.SUPPLIER_ID;
				}
				
			    public Double PRODUCT_LEVEL;

				public Double getPRODUCT_LEVEL () {
					return this.PRODUCT_LEVEL;
				}
				
			    public Double PRODUCT_REF_ID;

				public Double getPRODUCT_REF_ID () {
					return this.PRODUCT_REF_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_PROJECT_job02_Product_Dim.length) {
				if(length < 1024 && commonByteArray_BI_PROJECT_job02_Product_Dim.length == 0) {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[1024];
				} else {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length);
			strReturn = new String(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BI_PROJECT_job02_Product_Dim.length) {
				if(length < 1024 && commonByteArray_BI_PROJECT_job02_Product_Dim.length == 0) {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[1024];
				} else {
   					commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length);
			strReturn = new String(commonByteArray_BI_PROJECT_job02_Product_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
					this.PRODUCT_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
					this.PRODUCT_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
					// String
				
						writeString(this.PRODUCT_NAME,dos);
					
					// Double
				
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
					// Double
				
						if(this.PRODUCT_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
					// Double
				
						if(this.PRODUCT_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
					// String
				
						writeString(this.PRODUCT_NAME,dos);
					
					// Double
				
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
					// Double
				
						if(this.PRODUCT_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
					// Double
				
						if(this.PRODUCT_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCT_ID="+String.valueOf(PRODUCT_ID));
		sb.append(",PRODUCT_NAME="+PRODUCT_NAME);
		sb.append(",SUPPLIER_ID="+String.valueOf(SUPPLIER_ID));
		sb.append(",PRODUCT_LEVEL="+String.valueOf(PRODUCT_LEVEL));
		sb.append(",PRODUCT_REF_ID="+String.valueOf(PRODUCT_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_6Process(globalMap);

		productStruct product = new productStruct();
product_dimStruct product_dim = new product_dimStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"product_dim");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






    
    int nb_line_tDBOutput_1 = 0;
    int nb_line_update_tDBOutput_1 = 0;
    int nb_line_inserted_tDBOutput_1 = 0;
    int nb_line_deleted_tDBOutput_1 = 0;
    int nb_line_rejected_tDBOutput_1 = 0;

    int tmp_batchUpdateCount_tDBOutput_1 = 0;

    int deletedCount_tDBOutput_1=0;
    int updatedCount_tDBOutput_1=0;
    int insertedCount_tDBOutput_1=0;
    int rowsToCommitCount_tDBOutput_1=0;
    int rejectedCount_tDBOutput_1=0;

    boolean whetherReject_tDBOutput_1 = false;

    java.sql.Connection conn_tDBOutput_1 = null;

    //optional table
    String dbschema_tDBOutput_1 = null;
    String tableName_tDBOutput_1 = null;
                    String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tDBOutput_1);
                String url_tDBOutput_1 = null;
                    url_tDBOutput_1 = "jdbc:oracle:thin:@" + "localhost" + ":" + "1521" + ":" + "orcl";
                String dbUser_tDBOutput_1 = "orion_DW_user";
 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Fua5ilK3zt22TIJkFDTf8fukleLEvAPE70OnJVB6rfDtcNRBmOfMY9g=");

                String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
                dbschema_tDBOutput_1 = "";


                    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
        resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
            conn_tDBOutput_1.setAutoCommit(false);
            int commitEvery_tDBOutput_1 = 10000;
            int commitCounter_tDBOutput_1 = 0;
        int batchSize_tDBOutput_1 = 10000;
        int batchSizeCounter_tDBOutput_1=0;
        int count_tDBOutput_1=0;

        if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
            tableName_tDBOutput_1 = ("PRODUCT_DIM");
        } else {
            tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("PRODUCT_DIM");
        }
                String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1 + " (PRODUCT_ID,PRODUCT_LINE,PRODUCT_CATEGORY,PRODUCT_GROUP,PRODUCT_NAME,SUPPLIER_COUNTRY,SUPPLIER_NAME,SUPPLIER_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
                        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);





 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"product");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<supplierStruct> tHash_Lookup_supplier = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<supplierStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<supplierStruct>) 
					globalMap.get( "tHash_Lookup_supplier" ))
					;					
					
	

supplierStruct supplierHashKey = new supplierStruct();
supplierStruct supplierDefault = new supplierStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<groupStruct> tHash_Lookup_group = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<groupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<groupStruct>) 
					globalMap.get( "tHash_Lookup_group" ))
					;					
					
	

groupStruct groupHashKey = new groupStruct();
groupStruct groupDefault = new groupStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CategoryStruct> tHash_Lookup_Category = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CategoryStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CategoryStruct>) 
					globalMap.get( "tHash_Lookup_Category" ))
					;					
					
	

CategoryStruct CategoryHashKey = new CategoryStruct();
CategoryStruct CategoryDefault = new CategoryStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ligneStruct> tHash_Lookup_ligne = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ligneStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ligneStruct>) 
					globalMap.get( "tHash_Lookup_ligne" ))
					;					
					
	

ligneStruct ligneHashKey = new ligneStruct();
ligneStruct ligneDefault = new ligneStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
product_dimStruct product_dim_tmp = new product_dimStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
			String driverClass_tDBInput_1 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_1);
			
			String url_tDBInput_1 = "jdbc:ucanaccess://" + "C:/Users/benez/Downloads/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_1 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:ETav/ryAoXsT3bIyMrGTeld5cGAOs+kE5Sp7HQ==");
		   	
	        String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
	        
			String atnParams_tDBInput_1 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_1 = atnParams_tDBInput_1.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_1 = new java.util.Properties();
			atnParamsPrope_tDBInput_1.put("user",dbUser_tDBInput_1);
			atnParamsPrope_tDBInput_1.put("password",dbPwd_tDBInput_1);
			atnParamsPrope_tDBInput_1.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_1.getBytes()));
			conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, atnParamsPrope_tDBInput_1);
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  PRODUCT_LIST.PRODUCT_ID, \n  PRODUCT_LIST.PRODUCT_NAME, \n  PRODUCT_LIST.SUPPLIER_ID, \n  PRODUCT_LIST.PRODUCT_L"
+"EVEL, \n  PRODUCT_LIST.PRODUCT_REF_ID\nFROM PRODUCT_LIST";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								product.PRODUCT_ID = null;
							} else {
	                         		
            product.PRODUCT_ID = rs_tDBInput_1.getDouble(1);
            if(rs_tDBInput_1.wasNull()){
                    product.PRODUCT_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								product.PRODUCT_NAME = null;
							} else {
	                         		
        	product.PRODUCT_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								product.SUPPLIER_ID = null;
							} else {
	                         		
            product.SUPPLIER_ID = rs_tDBInput_1.getDouble(3);
            if(rs_tDBInput_1.wasNull()){
                    product.SUPPLIER_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								product.PRODUCT_LEVEL = null;
							} else {
	                         		
            product.PRODUCT_LEVEL = rs_tDBInput_1.getDouble(4);
            if(rs_tDBInput_1.wasNull()){
                    product.PRODUCT_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								product.PRODUCT_REF_ID = null;
							} else {
	                         		
            product.PRODUCT_REF_ID = rs_tDBInput_1.getDouble(5);
            if(rs_tDBInput_1.wasNull()){
                    product.PRODUCT_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"product"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "supplier" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsupplier = false;
       		  	    	
       		  	    	
 							supplierStruct supplierObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    supplierHashKey.SUPPLIER_ID =  product.SUPPLIER_ID ;
                        		    		

								
		                        	supplierHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_supplier.lookup( supplierHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_supplier.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_supplier != null && tHash_Lookup_supplier.getCount(supplierHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'supplier' and it contains more one result from keys :  supplier.SUPPLIER_ID = '" + supplierHashKey.SUPPLIER_ID + "'");
								} // G 071
							

							supplierStruct supplier = null;
                    		  	 
							   
                    		  	 
	       		  	    	supplierStruct fromLookup_supplier = null;
							supplier = supplierDefault;
										 
							
								 
							
							
								if (tHash_Lookup_supplier !=null && tHash_Lookup_supplier.hasNext()) { // G 099
								
							
								
								fromLookup_supplier = tHash_Lookup_supplier.next();

							
							
								} // G 099
							
							

							if(fromLookup_supplier != null) {
								supplier = fromLookup_supplier;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "group" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopgroup = false;
       		  	    	
       		  	    	
 							groupStruct groupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    groupHashKey.PRODUCT_ID = product.PRODUCT_REF_ID ;
                        		    		

								
		                        	groupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_group.lookup( groupHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_group.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_group != null && tHash_Lookup_group.getCount(groupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'group' and it contains more one result from keys :  group.PRODUCT_ID = '" + groupHashKey.PRODUCT_ID + "'");
								} // G 071
							

							groupStruct group = null;
                    		  	 
							   
                    		  	 
	       		  	    	groupStruct fromLookup_group = null;
							group = groupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_group !=null && tHash_Lookup_group.hasNext()) { // G 099
								
							
								
								fromLookup_group = tHash_Lookup_group.next();

							
							
								} // G 099
							
							

							if(fromLookup_group != null) {
								group = fromLookup_group;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Category" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopCategory = false;
       		  	    	
       		  	    	
 							CategoryStruct CategoryObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    CategoryHashKey.PRODUCT_ID = group.PRODUCT_REF_ID ;
                        		    		

								
		                        	CategoryHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Category.lookup( CategoryHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_Category.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Category != null && tHash_Lookup_Category.getCount(CategoryHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Category' and it contains more one result from keys :  Category.PRODUCT_ID = '" + CategoryHashKey.PRODUCT_ID + "'");
								} // G 071
							

							CategoryStruct Category = null;
                    		  	 
							   
                    		  	 
	       		  	    	CategoryStruct fromLookup_Category = null;
							Category = CategoryDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Category !=null && tHash_Lookup_Category.hasNext()) { // G 099
								
							
								
								fromLookup_Category = tHash_Lookup_Category.next();

							
							
								} // G 099
							
							

							if(fromLookup_Category != null) {
								Category = fromLookup_Category;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ligne" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopligne = false;
       		  	    	
       		  	    	
 							ligneStruct ligneObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    ligneHashKey.PRODUCT_ID = Category.PRODUCT_REF_ID ;
                        		    		

								
		                        	ligneHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ligne.lookup( ligneHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_ligne.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ligne != null && tHash_Lookup_ligne.getCount(ligneHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ligne' and it contains more one result from keys :  ligne.PRODUCT_ID = '" + ligneHashKey.PRODUCT_ID + "'");
								} // G 071
							

							ligneStruct ligne = null;
                    		  	 
							   
                    		  	 
	       		  	    	ligneStruct fromLookup_ligne = null;
							ligne = ligneDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ligne !=null && tHash_Lookup_ligne.hasNext()) { // G 099
								
							
								
								fromLookup_ligne = tHash_Lookup_ligne.next();

							
							
								} // G 099
							
							

							if(fromLookup_ligne != null) {
								ligne = fromLookup_ligne;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

product_dim = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'product_dim'
product_dim_tmp.PRODUCT_ID = product.PRODUCT_ID ;
product_dim_tmp.PRODUCT_LINE = ligne.PRODUCT_NAME ;
product_dim_tmp.PRODUCT_CATEGORY = Category.PRODUCT_NAME ;
product_dim_tmp.PRODUCT_GROUP = group.PRODUCT_NAME ;
product_dim_tmp.PRODUCT_NAME = product.PRODUCT_NAME ;
product_dim_tmp.SUPPLIER_COUNTRY = supplier.COUNTRY ;
product_dim_tmp.SUPPLIER_NAME = supplier.SUPPLIER_NAME ;
product_dim_tmp.SUPPLIER_ID = supplier.SUPPLIER_ID ;
product_dim = product_dim_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "product_dim"
if(product_dim != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"product_dim"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                        pstmt_tDBOutput_1.setDouble(1, product_dim.PRODUCT_ID);

                        if(product_dim.PRODUCT_LINE == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {if(product_dim.PRODUCT_LINE == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.CHAR);
} else if(product_dim.PRODUCT_LINE == " "){
pstmt_tDBOutput_1.setString(2, "");
} else {
pstmt_tDBOutput_1.setString(2, String.valueOf(product_dim.PRODUCT_LINE));
}}

                        if(product_dim.PRODUCT_CATEGORY == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {if(product_dim.PRODUCT_CATEGORY == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.CHAR);
} else if(product_dim.PRODUCT_CATEGORY == " "){
pstmt_tDBOutput_1.setString(3, "");
} else {
pstmt_tDBOutput_1.setString(3, String.valueOf(product_dim.PRODUCT_CATEGORY));
}}

                        if(product_dim.PRODUCT_GROUP == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {if(product_dim.PRODUCT_GROUP == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.CHAR);
} else if(product_dim.PRODUCT_GROUP == " "){
pstmt_tDBOutput_1.setString(4, "");
} else {
pstmt_tDBOutput_1.setString(4, String.valueOf(product_dim.PRODUCT_GROUP));
}}

                        if(product_dim.PRODUCT_NAME == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {if(product_dim.PRODUCT_NAME == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.CHAR);
} else if(product_dim.PRODUCT_NAME == " "){
pstmt_tDBOutput_1.setString(5, "");
} else {
pstmt_tDBOutput_1.setString(5, String.valueOf(product_dim.PRODUCT_NAME));
}}

                        if(product_dim.SUPPLIER_COUNTRY == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {if(product_dim.SUPPLIER_COUNTRY == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.CHAR);
} else if(product_dim.SUPPLIER_COUNTRY == " "){
pstmt_tDBOutput_1.setString(6, "");
} else {
pstmt_tDBOutput_1.setString(6, String.valueOf(product_dim.SUPPLIER_COUNTRY));
}}

                        if(product_dim.SUPPLIER_NAME == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {if(product_dim.SUPPLIER_NAME == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.CHAR);
} else if(product_dim.SUPPLIER_NAME == " "){
pstmt_tDBOutput_1.setString(7, "");
} else {
pstmt_tDBOutput_1.setString(7, String.valueOf(product_dim.SUPPLIER_NAME));
}}

                        if(product_dim.SUPPLIER_ID == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(8, product_dim.SUPPLIER_ID);
}

                pstmt_tDBOutput_1.addBatch();
                nb_line_tDBOutput_1++;
                batchSizeCounter_tDBOutput_1++;
            if (batchSize_tDBOutput_1 > 0 &&  batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                    pstmt_tDBOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			        java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tDBOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
                    insertedCount_tDBOutput_1
                += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
                rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                    if(batchSizeCounter_tDBOutput_1 > 0) {
                        try {
                            pstmt_tDBOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
					        java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
					    	String errormessage_tDBOutput_1;
							if (ne_tDBOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
								errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
							}else{
								errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tDBOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
                            insertedCount_tDBOutput_1
                        += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
                        rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
                    }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                    	batchSizeCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "product_dim"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_supplier != null) {
						tHash_Lookup_supplier.endGet();
					}
					globalMap.remove( "tHash_Lookup_supplier" );

					
					
				
					if(tHash_Lookup_group != null) {
						tHash_Lookup_group.endGet();
					}
					globalMap.remove( "tHash_Lookup_group" );

					
					
				
					if(tHash_Lookup_Category != null) {
						tHash_Lookup_Category.endGet();
					}
					globalMap.remove( "tHash_Lookup_Category" );

					
					
				
					if(tHash_Lookup_ligne != null) {
						tHash_Lookup_ligne.endGet();
					}
					globalMap.remove( "tHash_Lookup_ligne" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"product");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
	



	
        if(batchSizeCounter_tDBOutput_1 > 0) {
            try {
            	if (pstmt_tDBOutput_1 != null) {
					
					pstmt_tDBOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
		        java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
		    	String errormessage_tDBOutput_1;
				if (ne_tDBOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
					errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
				}else{
					errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tDBOutput_1);
            	
        	}
        	if (pstmt_tDBOutput_1 != null) {
            	tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tDBOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
				rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
            }
        }
        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
		if(commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
			
		}
		conn_tDBOutput_1.commit();
		if(commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
			
			rowsToCommitCount_tDBOutput_1 = 0;
		}
		commitCounter_tDBOutput_1 = 0;
		
		
		conn_tDBOutput_1 .close();
		
		resourceMap.put("finish_tDBOutput_1", true);
   	

	
	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"product_dim");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_supplier"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_group"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_Category"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ligne"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class supplierStruct implements routines.system.IPersistableComparableLookupRow<supplierStruct> {
    final static byte[] commonByteArrayLock_BI_PROJECT_job02_Product_Dim = new byte[0];
    static byte[] commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double SUPPLIER_ID;

				public Double getSUPPLIER_ID () {
					return this.SUPPLIER_ID;
				}
				
			    public String SUPPLIER_NAME;

				public String getSUPPLIER_NAME () {
					return this.SUPPLIER_NAME;
				}
				
			    public Double STREET_ID;

				public Double getSTREET_ID () {
					return this.STREET_ID;
				}
				
			    public String SUPPLIER_ADDRESS;

				public String getSUPPLIER_ADDRESS () {
					return this.SUPPLIER_ADDRESS;
				}
				
			    public String SUP_STREET_NUMBER;

				public String getSUP_STREET_NUMBER () {
					return this.SUP_STREET_NUMBER;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SUPPLIER_ID == null) ? 0 : this.SUPPLIER_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final supplierStruct other = (supplierStruct) obj;
		
						if (this.SUPPLIER_ID == null) {
							if (other.SUPPLIER_ID != null)
								return false;
						
						} else if (!this.SUPPLIER_ID.equals(other.SUPPLIER_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(supplierStruct other) {

		other.SUPPLIER_ID = this.SUPPLIER_ID;
	            other.SUPPLIER_NAME = this.SUPPLIER_NAME;
	            other.STREET_ID = this.STREET_ID;
	            other.SUPPLIER_ADDRESS = this.SUPPLIER_ADDRESS;
	            other.SUP_STREET_NUMBER = this.SUP_STREET_NUMBER;
	            other.COUNTRY = this.COUNTRY;
	            
	}

	public void copyKeysDataTo(supplierStruct other) {

		other.SUPPLIER_ID = this.SUPPLIER_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SUPPLIER_NAME = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.STREET_ID = null;
           				} else {
           			    	this.STREET_ID = dis.readDouble();
           				}
					
						this.SUPPLIER_ADDRESS = readString(dis,ois);
					
						this.SUP_STREET_NUMBER = readString(dis,ois);
					
						this.COUNTRY = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SUPPLIER_NAME = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.STREET_ID = null;
           				} else {
           			    	this.STREET_ID = objectIn.readDouble();
           				}
					
						this.SUPPLIER_ADDRESS = readString(dis,objectIn);
					
						this.SUP_STREET_NUMBER = readString(dis,objectIn);
					
						this.COUNTRY = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SUPPLIER_NAME, dos, oos);
					
						if(this.STREET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.STREET_ID);
		            	}
					
						writeString(this.SUPPLIER_ADDRESS, dos, oos);
					
						writeString(this.SUP_STREET_NUMBER, dos, oos);
					
						writeString(this.COUNTRY, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SUPPLIER_NAME, dos, objectOut);
					
						if(this.STREET_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.STREET_ID);
		            	}
					
						writeString(this.SUPPLIER_ADDRESS, dos, objectOut);
					
						writeString(this.SUP_STREET_NUMBER, dos, objectOut);
					
						writeString(this.COUNTRY, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SUPPLIER_ID="+String.valueOf(SUPPLIER_ID));
		sb.append(",SUPPLIER_NAME="+SUPPLIER_NAME);
		sb.append(",STREET_ID="+String.valueOf(STREET_ID));
		sb.append(",SUPPLIER_ADDRESS="+SUPPLIER_ADDRESS);
		sb.append(",SUP_STREET_NUMBER="+SUP_STREET_NUMBER);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(supplierStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SUPPLIER_ID, other.SUPPLIER_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		supplierStruct supplier = new supplierStruct();




	
	/**
	 * [tAdvancedHash_supplier begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_supplier", false);
		start_Hash.put("tAdvancedHash_supplier", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_supplier";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"supplier");
					}
				
		int tos_count_tAdvancedHash_supplier = 0;
		

			   		// connection name:supplier
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(supplier,supplier) | target node:tAdvancedHash_supplier - inputs:(supplier) outputs:()
			   		// linked node: tMap_1 - inputs:(product,supplier,group,Category,ligne) outputs:(product_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_supplier = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<supplierStruct> tHash_Lookup_supplier =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<supplierStruct>getLookup(matchingModeEnum_supplier);
	   						   
		   	   	   globalMap.put("tHash_Lookup_supplier", tHash_Lookup_supplier);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_supplier begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
			String driverClass_tDBInput_2 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_2);
			
			String url_tDBInput_2 = "jdbc:ucanaccess://" + "C:/Users/benez/Downloads/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_2 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:YWplizFDCiFRNqTnFj/6Li2OjkTRvPqtdvW21w==");
		   	
	        String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
	        
			String atnParams_tDBInput_2 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_2 = atnParams_tDBInput_2.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_2 = new java.util.Properties();
			atnParamsPrope_tDBInput_2.put("user",dbUser_tDBInput_2);
			atnParamsPrope_tDBInput_2.put("password",dbPwd_tDBInput_2);
			atnParamsPrope_tDBInput_2.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_2.getBytes()));
			conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, atnParamsPrope_tDBInput_2);
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  SUPPLIER.SUPPLIER_ID, \n  SUPPLIER.SUPPLIER_NAME, \n  SUPPLIER.STREET_ID, \n  SUPPLIER.SUPPLIER_ADDRESS, \n "
+" SUPPLIER.SUP_STREET_NUMBER, \n  SUPPLIER.COUNTRY\nFROM SUPPLIER";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								supplier.SUPPLIER_ID = null;
							} else {
	                         		
            supplier.SUPPLIER_ID = rs_tDBInput_2.getDouble(1);
            if(rs_tDBInput_2.wasNull()){
                    supplier.SUPPLIER_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								supplier.SUPPLIER_NAME = null;
							} else {
	                         		
        	supplier.SUPPLIER_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								supplier.STREET_ID = null;
							} else {
	                         		
            supplier.STREET_ID = rs_tDBInput_2.getDouble(3);
            if(rs_tDBInput_2.wasNull()){
                    supplier.STREET_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								supplier.SUPPLIER_ADDRESS = null;
							} else {
	                         		
        	supplier.SUPPLIER_ADDRESS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								supplier.SUP_STREET_NUMBER = null;
							} else {
	                         		
        	supplier.SUP_STREET_NUMBER = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								supplier.COUNTRY = null;
							} else {
	                         		
        	supplier.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_supplier main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_supplier";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"supplier"
						
						);
					}
					


			   
			   

					supplierStruct supplier_HashRow = new supplierStruct();
		   	   	   
				
				supplier_HashRow.SUPPLIER_ID = supplier.SUPPLIER_ID;
				
				supplier_HashRow.SUPPLIER_NAME = supplier.SUPPLIER_NAME;
				
				supplier_HashRow.STREET_ID = supplier.STREET_ID;
				
				supplier_HashRow.SUPPLIER_ADDRESS = supplier.SUPPLIER_ADDRESS;
				
				supplier_HashRow.SUP_STREET_NUMBER = supplier.SUP_STREET_NUMBER;
				
				supplier_HashRow.COUNTRY = supplier.COUNTRY;
				
			tHash_Lookup_supplier.put(supplier_HashRow);
			
            




 


	tos_count_tAdvancedHash_supplier++;

/**
 * [tAdvancedHash_supplier main ] stop
 */
	
	/**
	 * [tAdvancedHash_supplier process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_supplier";

	

 



/**
 * [tAdvancedHash_supplier process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_supplier process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_supplier";

	

 



/**
 * [tAdvancedHash_supplier process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_supplier end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_supplier";

	

tHash_Lookup_supplier.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"supplier");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_supplier", true);
end_Hash.put("tAdvancedHash_supplier", System.currentTimeMillis());




/**
 * [tAdvancedHash_supplier end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_supplier finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_supplier";

	

 



/**
 * [tAdvancedHash_supplier finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class groupStruct implements routines.system.IPersistableComparableLookupRow<groupStruct> {
    final static byte[] commonByteArrayLock_BI_PROJECT_job02_Product_Dim = new byte[0];
    static byte[] commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double PRODUCT_ID;

				public Double getPRODUCT_ID () {
					return this.PRODUCT_ID;
				}
				
			    public String PRODUCT_NAME;

				public String getPRODUCT_NAME () {
					return this.PRODUCT_NAME;
				}
				
			    public Double SUPPLIER_ID;

				public Double getSUPPLIER_ID () {
					return this.SUPPLIER_ID;
				}
				
			    public Double PRODUCT_LEVEL;

				public Double getPRODUCT_LEVEL () {
					return this.PRODUCT_LEVEL;
				}
				
			    public Double PRODUCT_REF_ID;

				public Double getPRODUCT_REF_ID () {
					return this.PRODUCT_REF_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PRODUCT_ID == null) ? 0 : this.PRODUCT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final groupStruct other = (groupStruct) obj;
		
						if (this.PRODUCT_ID == null) {
							if (other.PRODUCT_ID != null)
								return false;
						
						} else if (!this.PRODUCT_ID.equals(other.PRODUCT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(groupStruct other) {

		other.PRODUCT_ID = this.PRODUCT_ID;
	            other.PRODUCT_NAME = this.PRODUCT_NAME;
	            other.SUPPLIER_ID = this.SUPPLIER_ID;
	            other.PRODUCT_LEVEL = this.PRODUCT_LEVEL;
	            other.PRODUCT_REF_ID = this.PRODUCT_REF_ID;
	            
	}

	public void copyKeysDataTo(groupStruct other) {

		other.PRODUCT_ID = this.PRODUCT_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PRODUCT_NAME = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PRODUCT_NAME = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.PRODUCT_NAME, dos, oos);
					
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
						if(this.PRODUCT_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
						if(this.PRODUCT_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.PRODUCT_NAME, dos, objectOut);
					
						if(this.SUPPLIER_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.SUPPLIER_ID);
		            	}
					
						if(this.PRODUCT_LEVEL == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
						if(this.PRODUCT_REF_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCT_ID="+String.valueOf(PRODUCT_ID));
		sb.append(",PRODUCT_NAME="+PRODUCT_NAME);
		sb.append(",SUPPLIER_ID="+String.valueOf(SUPPLIER_ID));
		sb.append(",PRODUCT_LEVEL="+String.valueOf(PRODUCT_LEVEL));
		sb.append(",PRODUCT_REF_ID="+String.valueOf(PRODUCT_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(groupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PRODUCT_ID, other.PRODUCT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		groupStruct group = new groupStruct();




	
	/**
	 * [tAdvancedHash_group begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_group", false);
		start_Hash.put("tAdvancedHash_group", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_group";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"group");
					}
				
		int tos_count_tAdvancedHash_group = 0;
		

			   		// connection name:group
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(group,group) | target node:tAdvancedHash_group - inputs:(group) outputs:()
			   		// linked node: tMap_1 - inputs:(product,supplier,group,Category,ligne) outputs:(product_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_group = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<groupStruct> tHash_Lookup_group =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<groupStruct>getLookup(matchingModeEnum_group);
	   						   
		   	   	   globalMap.put("tHash_Lookup_group", tHash_Lookup_group);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_group begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
			String driverClass_tDBInput_4 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_4);
			
			String url_tDBInput_4 = "jdbc:ucanaccess://" + "C:/Users/benez/Downloads/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_4 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:c0I1fSvgoq5WXYTSJ05a8zfIrZbWiB+5+OAYPQ==");
		   	
	        String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
	        
			String atnParams_tDBInput_4 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_4 = atnParams_tDBInput_4.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_4 = new java.util.Properties();
			atnParamsPrope_tDBInput_4.put("user",dbUser_tDBInput_4);
			atnParamsPrope_tDBInput_4.put("password",dbPwd_tDBInput_4);
			atnParamsPrope_tDBInput_4.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_4.getBytes()));
			conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, atnParamsPrope_tDBInput_4);
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  PRODUCT_LIST.PRODUCT_ID, \n  PRODUCT_LIST.PRODUCT_NAME, \n  PRODUCT_LIST.SUPPLIER_ID, \n  PRODUCT_LIST.PRODUCT_L"
+"EVEL, \n  PRODUCT_LIST.PRODUCT_REF_ID\nFROM PRODUCT_LIST";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								group.PRODUCT_ID = null;
							} else {
	                         		
            group.PRODUCT_ID = rs_tDBInput_4.getDouble(1);
            if(rs_tDBInput_4.wasNull()){
                    group.PRODUCT_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								group.PRODUCT_NAME = null;
							} else {
	                         		
        	group.PRODUCT_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								group.SUPPLIER_ID = null;
							} else {
	                         		
            group.SUPPLIER_ID = rs_tDBInput_4.getDouble(3);
            if(rs_tDBInput_4.wasNull()){
                    group.SUPPLIER_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								group.PRODUCT_LEVEL = null;
							} else {
	                         		
            group.PRODUCT_LEVEL = rs_tDBInput_4.getDouble(4);
            if(rs_tDBInput_4.wasNull()){
                    group.PRODUCT_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								group.PRODUCT_REF_ID = null;
							} else {
	                         		
            group.PRODUCT_REF_ID = rs_tDBInput_4.getDouble(5);
            if(rs_tDBInput_4.wasNull()){
                    group.PRODUCT_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_group main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"group"
						
						);
					}
					


			   
			   

					groupStruct group_HashRow = new groupStruct();
		   	   	   
				
				group_HashRow.PRODUCT_ID = group.PRODUCT_ID;
				
				group_HashRow.PRODUCT_NAME = group.PRODUCT_NAME;
				
				group_HashRow.SUPPLIER_ID = group.SUPPLIER_ID;
				
				group_HashRow.PRODUCT_LEVEL = group.PRODUCT_LEVEL;
				
				group_HashRow.PRODUCT_REF_ID = group.PRODUCT_REF_ID;
				
			tHash_Lookup_group.put(group_HashRow);
			
            




 


	tos_count_tAdvancedHash_group++;

/**
 * [tAdvancedHash_group main ] stop
 */
	
	/**
	 * [tAdvancedHash_group process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

 



/**
 * [tAdvancedHash_group process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_group process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

 



/**
 * [tAdvancedHash_group process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_group end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

tHash_Lookup_group.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"group");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_group", true);
end_Hash.put("tAdvancedHash_group", System.currentTimeMillis());




/**
 * [tAdvancedHash_group end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_group finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

 



/**
 * [tAdvancedHash_group finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class CategoryStruct implements routines.system.IPersistableComparableLookupRow<CategoryStruct> {
    final static byte[] commonByteArrayLock_BI_PROJECT_job02_Product_Dim = new byte[0];
    static byte[] commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double PRODUCT_ID;

				public Double getPRODUCT_ID () {
					return this.PRODUCT_ID;
				}
				
			    public String PRODUCT_NAME;

				public String getPRODUCT_NAME () {
					return this.PRODUCT_NAME;
				}
				
			    public Double SUPPLIER_ID;

				public Double getSUPPLIER_ID () {
					return this.SUPPLIER_ID;
				}
				
			    public Double PRODUCT_LEVEL;

				public Double getPRODUCT_LEVEL () {
					return this.PRODUCT_LEVEL;
				}
				
			    public Double PRODUCT_REF_ID;

				public Double getPRODUCT_REF_ID () {
					return this.PRODUCT_REF_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PRODUCT_ID == null) ? 0 : this.PRODUCT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CategoryStruct other = (CategoryStruct) obj;
		
						if (this.PRODUCT_ID == null) {
							if (other.PRODUCT_ID != null)
								return false;
						
						} else if (!this.PRODUCT_ID.equals(other.PRODUCT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(CategoryStruct other) {

		other.PRODUCT_ID = this.PRODUCT_ID;
	            other.PRODUCT_NAME = this.PRODUCT_NAME;
	            other.SUPPLIER_ID = this.SUPPLIER_ID;
	            other.PRODUCT_LEVEL = this.PRODUCT_LEVEL;
	            other.PRODUCT_REF_ID = this.PRODUCT_REF_ID;
	            
	}

	public void copyKeysDataTo(CategoryStruct other) {

		other.PRODUCT_ID = this.PRODUCT_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PRODUCT_NAME = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PRODUCT_NAME = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.PRODUCT_NAME, dos, oos);
					
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
						if(this.PRODUCT_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
						if(this.PRODUCT_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.PRODUCT_NAME, dos, objectOut);
					
						if(this.SUPPLIER_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.SUPPLIER_ID);
		            	}
					
						if(this.PRODUCT_LEVEL == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
						if(this.PRODUCT_REF_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCT_ID="+String.valueOf(PRODUCT_ID));
		sb.append(",PRODUCT_NAME="+PRODUCT_NAME);
		sb.append(",SUPPLIER_ID="+String.valueOf(SUPPLIER_ID));
		sb.append(",PRODUCT_LEVEL="+String.valueOf(PRODUCT_LEVEL));
		sb.append(",PRODUCT_REF_ID="+String.valueOf(PRODUCT_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CategoryStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PRODUCT_ID, other.PRODUCT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		CategoryStruct Category = new CategoryStruct();




	
	/**
	 * [tAdvancedHash_Category begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Category", false);
		start_Hash.put("tAdvancedHash_Category", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Category";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Category");
					}
				
		int tos_count_tAdvancedHash_Category = 0;
		

			   		// connection name:Category
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(Category,Category) | target node:tAdvancedHash_Category - inputs:(Category) outputs:()
			   		// linked node: tMap_1 - inputs:(product,supplier,group,Category,ligne) outputs:(product_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Category = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CategoryStruct> tHash_Lookup_Category =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<CategoryStruct>getLookup(matchingModeEnum_Category);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Category", tHash_Lookup_Category);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Category begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
			String driverClass_tDBInput_5 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_5);
			
			String url_tDBInput_5 = "jdbc:ucanaccess://" + "C:/Users/benez/Downloads/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_5 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:50JWf1Jf5jSlJusbSwOsb4Ad9pXt5qursRxYcA==");
		   	
	        String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
	        
			String atnParams_tDBInput_5 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_5 = atnParams_tDBInput_5.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_5 = new java.util.Properties();
			atnParamsPrope_tDBInput_5.put("user",dbUser_tDBInput_5);
			atnParamsPrope_tDBInput_5.put("password",dbPwd_tDBInput_5);
			atnParamsPrope_tDBInput_5.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_5.getBytes()));
			conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, atnParamsPrope_tDBInput_5);
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  PRODUCT_LIST.PRODUCT_ID, \n  PRODUCT_LIST.PRODUCT_NAME, \n  PRODUCT_LIST.SUPPLIER_ID, \n  PRODUCT_LIST.PRODUCT_L"
+"EVEL, \n  PRODUCT_LIST.PRODUCT_REF_ID\nFROM PRODUCT_LIST";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								Category.PRODUCT_ID = null;
							} else {
	                         		
            Category.PRODUCT_ID = rs_tDBInput_5.getDouble(1);
            if(rs_tDBInput_5.wasNull()){
                    Category.PRODUCT_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								Category.PRODUCT_NAME = null;
							} else {
	                         		
        	Category.PRODUCT_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								Category.SUPPLIER_ID = null;
							} else {
	                         		
            Category.SUPPLIER_ID = rs_tDBInput_5.getDouble(3);
            if(rs_tDBInput_5.wasNull()){
                    Category.SUPPLIER_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								Category.PRODUCT_LEVEL = null;
							} else {
	                         		
            Category.PRODUCT_LEVEL = rs_tDBInput_5.getDouble(4);
            if(rs_tDBInput_5.wasNull()){
                    Category.PRODUCT_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								Category.PRODUCT_REF_ID = null;
							} else {
	                         		
            Category.PRODUCT_REF_ID = rs_tDBInput_5.getDouble(5);
            if(rs_tDBInput_5.wasNull()){
                    Category.PRODUCT_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Category main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Category";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Category"
						
						);
					}
					


			   
			   

					CategoryStruct Category_HashRow = new CategoryStruct();
		   	   	   
				
				Category_HashRow.PRODUCT_ID = Category.PRODUCT_ID;
				
				Category_HashRow.PRODUCT_NAME = Category.PRODUCT_NAME;
				
				Category_HashRow.SUPPLIER_ID = Category.SUPPLIER_ID;
				
				Category_HashRow.PRODUCT_LEVEL = Category.PRODUCT_LEVEL;
				
				Category_HashRow.PRODUCT_REF_ID = Category.PRODUCT_REF_ID;
				
			tHash_Lookup_Category.put(Category_HashRow);
			
            




 


	tos_count_tAdvancedHash_Category++;

/**
 * [tAdvancedHash_Category main ] stop
 */
	
	/**
	 * [tAdvancedHash_Category process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Category";

	

 



/**
 * [tAdvancedHash_Category process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Category process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Category";

	

 



/**
 * [tAdvancedHash_Category process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Category end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Category";

	

tHash_Lookup_Category.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Category");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Category", true);
end_Hash.put("tAdvancedHash_Category", System.currentTimeMillis());




/**
 * [tAdvancedHash_Category end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Category finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Category";

	

 



/**
 * [tAdvancedHash_Category finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class ligneStruct implements routines.system.IPersistableComparableLookupRow<ligneStruct> {
    final static byte[] commonByteArrayLock_BI_PROJECT_job02_Product_Dim = new byte[0];
    static byte[] commonByteArray_BI_PROJECT_job02_Product_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double PRODUCT_ID;

				public Double getPRODUCT_ID () {
					return this.PRODUCT_ID;
				}
				
			    public String PRODUCT_NAME;

				public String getPRODUCT_NAME () {
					return this.PRODUCT_NAME;
				}
				
			    public Double SUPPLIER_ID;

				public Double getSUPPLIER_ID () {
					return this.SUPPLIER_ID;
				}
				
			    public Double PRODUCT_LEVEL;

				public Double getPRODUCT_LEVEL () {
					return this.PRODUCT_LEVEL;
				}
				
			    public Double PRODUCT_REF_ID;

				public Double getPRODUCT_REF_ID () {
					return this.PRODUCT_REF_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PRODUCT_ID == null) ? 0 : this.PRODUCT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ligneStruct other = (ligneStruct) obj;
		
						if (this.PRODUCT_ID == null) {
							if (other.PRODUCT_ID != null)
								return false;
						
						} else if (!this.PRODUCT_ID.equals(other.PRODUCT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ligneStruct other) {

		other.PRODUCT_ID = this.PRODUCT_ID;
	            other.PRODUCT_NAME = this.PRODUCT_NAME;
	            other.SUPPLIER_ID = this.SUPPLIER_ID;
	            other.PRODUCT_LEVEL = this.PRODUCT_LEVEL;
	            other.PRODUCT_REF_ID = this.PRODUCT_REF_ID;
	            
	}

	public void copyKeysDataTo(ligneStruct other) {

		other.PRODUCT_ID = this.PRODUCT_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_BI_PROJECT_job02_Product_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_ID = null;
           				} else {
           			    	this.PRODUCT_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.PRODUCT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PRODUCT_NAME = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PRODUCT_NAME = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.SUPPLIER_ID = null;
           				} else {
           			    	this.SUPPLIER_ID = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_LEVEL = null;
           				} else {
           			    	this.PRODUCT_LEVEL = objectIn.readDouble();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.PRODUCT_REF_ID = null;
           				} else {
           			    	this.PRODUCT_REF_ID = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.PRODUCT_NAME, dos, oos);
					
						if(this.SUPPLIER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUPPLIER_ID);
		            	}
					
						if(this.PRODUCT_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
						if(this.PRODUCT_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.PRODUCT_NAME, dos, objectOut);
					
						if(this.SUPPLIER_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.SUPPLIER_ID);
		            	}
					
						if(this.PRODUCT_LEVEL == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PRODUCT_LEVEL);
		            	}
					
						if(this.PRODUCT_REF_ID == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.PRODUCT_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCT_ID="+String.valueOf(PRODUCT_ID));
		sb.append(",PRODUCT_NAME="+PRODUCT_NAME);
		sb.append(",SUPPLIER_ID="+String.valueOf(SUPPLIER_ID));
		sb.append(",PRODUCT_LEVEL="+String.valueOf(PRODUCT_LEVEL));
		sb.append(",PRODUCT_REF_ID="+String.valueOf(PRODUCT_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ligneStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PRODUCT_ID, other.PRODUCT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ligneStruct ligne = new ligneStruct();




	
	/**
	 * [tAdvancedHash_ligne begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ligne", false);
		start_Hash.put("tAdvancedHash_ligne", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ligne";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ligne");
					}
				
		int tos_count_tAdvancedHash_ligne = 0;
		

			   		// connection name:ligne
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_1) outputs:(ligne,ligne) | target node:tAdvancedHash_ligne - inputs:(ligne) outputs:()
			   		// linked node: tMap_1 - inputs:(product,supplier,group,Category,ligne) outputs:(product_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ligne = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ligneStruct> tHash_Lookup_ligne =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ligneStruct>getLookup(matchingModeEnum_ligne);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ligne", tHash_Lookup_ligne);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ligne begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
			String driverClass_tDBInput_6 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_6);
			
			String url_tDBInput_6 = "jdbc:ucanaccess://" + "C:/Users/benez/Downloads/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_6 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:VJe4AtStRVKHdaES0Bm2eApNae7DWmaqYSXWYg==");
		   	
	        String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
	        
			String atnParams_tDBInput_6 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_6 = atnParams_tDBInput_6.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_6 = new java.util.Properties();
			atnParamsPrope_tDBInput_6.put("user",dbUser_tDBInput_6);
			atnParamsPrope_tDBInput_6.put("password",dbPwd_tDBInput_6);
			atnParamsPrope_tDBInput_6.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_6.getBytes()));
			conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, atnParamsPrope_tDBInput_6);
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT \n  PRODUCT_LIST.PRODUCT_ID, \n  PRODUCT_LIST.PRODUCT_NAME, \n  PRODUCT_LIST.SUPPLIER_ID, \n  PRODUCT_LIST.PRODUCT_L"
+"EVEL, \n  PRODUCT_LIST.PRODUCT_REF_ID\nFROM PRODUCT_LIST";
		    

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								ligne.PRODUCT_ID = null;
							} else {
	                         		
            ligne.PRODUCT_ID = rs_tDBInput_6.getDouble(1);
            if(rs_tDBInput_6.wasNull()){
                    ligne.PRODUCT_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								ligne.PRODUCT_NAME = null;
							} else {
	                         		
        	ligne.PRODUCT_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								ligne.SUPPLIER_ID = null;
							} else {
	                         		
            ligne.SUPPLIER_ID = rs_tDBInput_6.getDouble(3);
            if(rs_tDBInput_6.wasNull()){
                    ligne.SUPPLIER_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								ligne.PRODUCT_LEVEL = null;
							} else {
	                         		
            ligne.PRODUCT_LEVEL = rs_tDBInput_6.getDouble(4);
            if(rs_tDBInput_6.wasNull()){
                    ligne.PRODUCT_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								ligne.PRODUCT_REF_ID = null;
							} else {
	                         		
            ligne.PRODUCT_REF_ID = rs_tDBInput_6.getDouble(5);
            if(rs_tDBInput_6.wasNull()){
                    ligne.PRODUCT_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_ligne main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ligne";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ligne"
						
						);
					}
					


			   
			   

					ligneStruct ligne_HashRow = new ligneStruct();
		   	   	   
				
				ligne_HashRow.PRODUCT_ID = ligne.PRODUCT_ID;
				
				ligne_HashRow.PRODUCT_NAME = ligne.PRODUCT_NAME;
				
				ligne_HashRow.SUPPLIER_ID = ligne.SUPPLIER_ID;
				
				ligne_HashRow.PRODUCT_LEVEL = ligne.PRODUCT_LEVEL;
				
				ligne_HashRow.PRODUCT_REF_ID = ligne.PRODUCT_REF_ID;
				
			tHash_Lookup_ligne.put(ligne_HashRow);
			
            




 


	tos_count_tAdvancedHash_ligne++;

/**
 * [tAdvancedHash_ligne main ] stop
 */
	
	/**
	 * [tAdvancedHash_ligne process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ligne";

	

 



/**
 * [tAdvancedHash_ligne process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_ligne process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ligne";

	

 



/**
 * [tAdvancedHash_ligne process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ligne end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ligne";

	

tHash_Lookup_ligne.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ligne");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_ligne", true);
end_Hash.put("tAdvancedHash_ligne", System.currentTimeMillis());




/**
 * [tAdvancedHash_ligne end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ligne finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ligne";

	

 



/**
 * [tAdvancedHash_ligne finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final job02_Product_Dim job02_Product_DimClass = new job02_Product_Dim();

        int exitCode = job02_Product_DimClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = job02_Product_Dim.class.getClassLoader().getResourceAsStream("bi_project/job02_product_dim_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = job02_Product_Dim.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : job02_Product_Dim");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     178799 characters generated by Talend Open Studio for Data Integration 
 *     on the April 15, 2023 at 12:05:04 AM CET
 ************************************************************************************************/